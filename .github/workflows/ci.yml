name: CI

on:
  push:
    branches:
      - master
  pull_request:
  release:
    types: [published]

env:
  CARGO_TERM_COLOR: always
<<<<<<< HEAD
<<<<<<< HEAD
  RUSTFLAGS: -D warnings -D clippy::dbg_macro
=======
>>>>>>> fuel-types/master

jobs:
  cancel-previous-runs:
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.1
        with:
          access_token: ${{ github.token }}

<<<<<<< HEAD
=======
  lint-toml-files:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - name: Install Cargo.toml linter
        uses: baptiste0928/cargo-install@v1
        with:
          crate: cargo-toml-lint
          version: "0.1"
      - name: Run Cargo.toml linter
        run: git ls-files | grep Cargo.toml$ | xargs --verbose -n 1 cargo-toml-lint
      - name: Notify if Job Fails
        uses: ravsamhq/notify-slack-action@v1
        if: always() && github.ref == 'refs/heads/master'
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{workflow} has {status_message}'
          message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>'
          footer: ''
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}

>>>>>>> fuel-types/master
  cargo-verifications:
    needs: cancel-previous-runs
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - command: fmt
            args: --all --verbose -- --check
          - command: clippy
<<<<<<< HEAD
            args: --all-targets --all-features
          - command: check
            args: --all-targets
=======
            args: --all-targets --all-features -- -D warnings -D clippy::dbg_macro
>>>>>>> fuel-types/master
          - command: check
            args: --all-targets --all-features
          - command: check
            args: --verbose --target thumbv6m-none-eabi --no-default-features
          - command: check
<<<<<<< HEAD
            args: --verbose --target thumbv6m-none-eabi --no-default-features --features alloc
          - command: check
            args: --verbose --target thumbv6m-none-eabi --no-default-features --features serde
=======
            args: --verbose --target thumbv6m-none-eabi --no-default-features --features serde
          - command: check
            args: --verbose --target thumbv6m-none-eabi --no-default-features --features serde,alloc
>>>>>>> fuel-types/master
          - command: test
            args: --all-targets --all-features
          - command: test
            args: --all-targets --no-default-features
          - command: test
            args: --all-targets --no-default-features --features serde
          - command: test
<<<<<<< HEAD
            args: --all-targets --no-default-features --features alloc
=======
            args: --all-targets --no-default-features --features serde,alloc
>>>>>>> fuel-types/master
          - command: test
            args: --all-targets --features serde
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          # Using thumbv6m-none-eabi as ARMv6-M arbitrary common choice for a bare-minimum target.
          # More info: https://docs.rs/cortex-m-rt/latest/cortex_m_rt/
          #
          # Can be replaced by other targets that guarantee bare-minimum no-std
          target: thumbv6m-none-eabi
      - uses: Swatinem/rust-cache@v1
<<<<<<< HEAD
        with:
          # This action doesn't customize the cache key for each matrix run by default
          # leading to conflicts and overrides between different feature sets
          key: "${{ matrix.job.command }} ${{ matrix.job.args }}"
=======
>>>>>>> fuel-types/master
      - name: ${{ matrix.command }} ${{ matrix.args }}
        uses: actions-rs/cargo@v1
        with:
          command: ${{ matrix.command }}
          args: ${{ matrix.args }}
      - name: Notify if Job Fails
        uses: ravsamhq/notify-slack-action@v1
        if: always() && github.ref == 'refs/heads/master'
        with:
          status: ${{ job.status }}
          token: ${{ secrets.GITHUB_TOKEN }}
          notification_title: '{workflow} has {status_message}'
          message_format: '{emoji} *{workflow}* {status_message} in <{repo_url}|{repo}> : <{run_url}|View Run Results>'
          footer: ''
          notify_when: 'failure'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_NOTIFY_BUILD }}
          RUSTFLAGS: -D warnings
<<<<<<< HEAD

  publish:
    # Only do this job if publishing a release
    needs:
      - cargo-verifications
      s
jobs:
=======

jobs:
>>>>>>> fuel-vm/master
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

<<<<<<< HEAD
    - name: Rust Caching
      uses: Swatinem/rust-cache@v1

=======
>>>>>>> fuel-vm/master
    - name: Install toolchain
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable
        override: true

<<<<<<< HEAD
    - name: Install Cargo.toml linter
      uses: baptiste0928/cargo-install@v1
      with:
        crate: cargo-toml-lint
        version: "0.1"

    # Using thumbv6m-none-eabi as ARMv6-M arbitrary common choice for a bare-minimum target.
    # More info: https://docs.rs/cortex-m-rt/latest/cortex_m_rt/
    #
    # Can be replaced by other targets that guarantee bare-minimum no-std
    - name: Install toolchain no-std
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
        target: thumbv6m-none-eabi
        override: true

    - name: Install Cargo.toml linter
      uses: baptiste0928/cargo-install@v1
      with:
        crate: cargo-toml-lint
        version: "0.1"

    - name: Run Cargo.toml linter
      run:  git ls-files | grep Cargo.toml$ | xargs --verbose -n 1 cargo-toml-lint

=======
>>>>>>> fuel-vm/master
    - name: Install rustfmt
      run: rustup component add rustfmt

    - name: Check formatting
      uses: actions-rs/cargo@v1
      with:
        command: fmt
        args: --all --verbose -- --check

<<<<<<< HEAD
    - name: Install clippy
      run: rustup component add clippy

    - name: Clippy
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --all-features --all-targets -- -D warnings -D clippy::dbg_macro

=======
>>>>>>> fuel-vm/master
    - name: Build
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose

<<<<<<< HEAD
    - name: Build no-std
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose --target thumbv6m-none-eabi --no-default-features

    - name: Build no-std serde
      uses: actions-rs/cargo@v1
      with:
        command: build
        args: --verbose --target thumbv6m-none-eabi --no-default-features --features serde

    - name: Run tests
    - name: Test
=======
    - name: Run clippy checks
      uses: actions-rs/cargo@v1
      with:
        command: clippy
        args: --all-targets --all-features

    - name: Run basic tests
>>>>>>> fuel-vm/master
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose

<<<<<<< HEAD
    - name: Run tests no-std
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose --no-default-features

    - name: Run serde tests
=======
    - name: Run all tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose --all-features

    - name: Run tests random
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose --features random

    - name: Run tests profiling
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose --features random,profile-gas,profile-coverage,serde

    - name: Run debug tests
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose --features debug

    - name: Run tests serde
>>>>>>> fuel-vm/master
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose --features serde

<<<<<<< HEAD
    - name: Run serde tests no-std
      uses: actions-rs/cargo@v1
      with:
        command: test
        args: --verbose --no-default-features --features serde

  publish:
    # Only do this job if publishing a release
    needs: build

  publish:
    # Only do this job if publishing a release
    needs: build
>>>>>>> fuel-storage/master
=======
  publish:
    # Only do this job if publishing a release
    needs: cargo-verifications
>>>>>>> fuel-types/master
=======
  publish:
    # Only do this job if publishing a release
    needs: build
>>>>>>> fuel-vm/master
    if: github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Verify tag version
        run: |
<<<<<<< HEAD
<<<<<<< HEAD
          curl -sSLf "https://github.com/TomWright/dasel/releases/download/v1.24.3/dasel_linux_amd64" -L -o dasel && chmod +x dasel
          mv ./dasel /usr/local/bin/dasel
=======
>>>>>>> fuel-types/master
          cargo install toml-cli
=======
          curl -sSLf "https://github.com/TomWright/dasel/releases/download/v1.24.3/dasel_linux_amd64" -L -o dasel && chmod +x dasel
          mv ./dasel /usr/local/bin/dasel
>>>>>>> fuel-vm/master
          ./.github/workflows/scripts/verify_tag.sh ${{ github.ref_name }} Cargo.toml

      - name: Publish crate
        uses: katyo/publish-crates@v1
        with:
          registry-token: ${{ secrets.CARGO_REGISTRY_TOKEN }}
